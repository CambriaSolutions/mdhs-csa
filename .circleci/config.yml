version: 2
jobs:
  deploy_dev_dialogflow_agent:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd scripts && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - scripts/node_modules
      - run:
          name: 'Add env variables'
          command: cd scripts && echo
            "AGENT_PROJECT=${DEV_AGENT_PROJECT}

            AGENT_PRIVATE_KEY=${DEV_AGENT_PRIVATE_KEY}

            AGENT_CLIENT_EMAIL=${DEV_AGENT_CLIENT_EMAIL}" > .env
      - run:
          name: 'Agent configuration'
          command: cd agent && mv agent.dev.json agent.json
      - run:
          name: 'Import to Dev DialogFlow'
          command: cd scripts && node importDialogFlow
  deploy_dev_functions:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd functions && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - functions/node_modules
      - run:
          name: 'Add env variables and deploy'
          command: cd functions && echo
            "GOOGLE_MAPS_KEY=${DEV_GOOGLE_MAPS_KEY}

            SERVICE_DESK_KEY=${DEV_SERVICE_DESK_KEY}

            SERVICE_DESK_URI=${DEV_SERVICE_DESK_URI}

            SERVICE_DESK_ID=${DEV_SERVICE_DESK_ID}

            REQUEST_TYPE_ID=${DEV_REQUEST_TYPE_ID}

            SERVICE_DESK_ENV=${DEV_SERVICE_DESK_ENV}

            ANALYTICS_URI=${DEV_ANALYTICS_URI}

            AUTOML_PROJECT=${DEV_AUTOML_PROJECT}

            AUTOML_LOCATION=${DEV_AUTOML_LOCATION}

            AUTOML_SM_MODEL=${DEV_AUTOML_SM_MODEL}

            AUTOML_CAT_MODEL=${DEV_AUTOML_CAT_MODEL}

            AUTOML_PRIVATE_KEY=${DEV_AUTOML_PRIVATE_KEY}

            AUTOML_CLIENT_EMAIL=${DEV_AUTOML_CLIENT_EMAIL}" > .env
      - run:
          name: 'Run geocode script'
          command: cd functions && node retrieveCoordinates
      - run: sudo npm install -g firebase-tools
      - run: firebase deploy -P $DEV_FIREBASE_PROJECT_ID --only functions --token $FIREBASE_DEPLOY_TOKEN
  deploy_isd_dialogflow_agent:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd scripts && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - scripts/node_modules
      - run:
          name: 'Add env variables'
          command: cd scripts && echo
            "AGENT_PROJECT=${ISD_AGENT_PROJECT}

            AGENT_PRIVATE_KEY=${ISD_AGENT_PRIVATE_KEY}

            AGENT_CLIENT_EMAIL=${ISD_AGENT_CLIENT_EMAIL}" > .env
      - run:
          name: 'Agent Configuration'
          command: cd agent && mv agent.isd.json agent.json
      - run:
          name: 'Import to ISD DialogFlow'
          command: cd scripts && node importDialogFlow
  deploy_isd_functions:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd functions && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - functions/node_modules
      - run:
          name: 'Add env variables and deploy'
          command: cd functions && echo
            "GOOGLE_MAPS_KEY=${DEV_GOOGLE_MAPS_KEY}

            SERVICE_DESK_KEY=${DEV_SERVICE_DESK_KEY}

            SERVICE_DESK_URI=${DEV_SERVICE_DESK_URI}

            SERVICE_DESK_ID=${DEV_SERVICE_DESK_ID}

            REQUEST_TYPE_ID=${DEV_REQUEST_TYPE_ID}

            SERVICE_DESK_ENV=${DEV_SERVICE_DESK_ENV}

            ANALYTICS_URI=${DEV_ANALYTICS_URI}

            AUTOML_PROJECT=${DEV_AUTOML_PROJECT}

            AUTOML_LOCATION=${DEV_AUTOML_LOCATION}

            AUTOML_SM_MODEL=${DEV_AUTOML_SM_MODEL}

            AUTOML_CAT_MODEL=${DEV_AUTOML_CAT_MODEL}

            AUTOML_PRIVATE_KEY=${DEV_AUTOML_PRIVATE_KEY}

            AUTOML_CLIENT_EMAIL=${DEV_AUTOML_CLIENT_EMAIL}" > .env
      - run:
          name: 'Run geocode script'
          command: cd functions && node retrieveCoordinates
      - run: sudo npm install -g firebase-tools
      - run: firebase deploy -P $ISD_FIREBASE_PROJECT_ID --only functions --token $FIREBASE_DEPLOY_TOKEN
  deploy_stage_dialogflow_agent:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd scripts && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - scripts/node_modules
      - run:
          name: 'Add env variables'
          command: cd scripts && echo
            "AGENT_PROJECT=${STAGE_AGENT_PROJECT}

            AGENT_PRIVATE_KEY=${STAGE_AGENT_PRIVATE_KEY}

            AGENT_CLIENT_EMAIL=${STAGE_AGENT_CLIENT_EMAIL}" > .env
      - run:
          name: 'Agent Configuration'
          command: cd agent && mv agent.stage.json agent.json
      - run:
          name: 'Import to Stage DialogFlow'
          command: cd scripts && node importDialogFlow
  deploy_stage_functions:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd functions && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - functions/node_modules
      - run:
          name: 'Add env variables and deploy'
          command: cd functions && echo
            "GOOGLE_MAPS_KEY=${STAGE_GOOGLE_MAPS_KEY}

            SERVICE_DESK_KEY=${STAGE_SERVICE_DESK_KEY}

            SERVICE_DESK_URI=${STAGE_SERVICE_DESK_URI}

            SERVICE_DESK_ID=${STAGE_SERVICE_DESK_ID}

            REQUEST_TYPE_ID=${STAGE_REQUEST_TYPE_ID}

            SERVICE_DESK_ENV=${STAGE_SERVICE_DESK_ENV}

            ANALYTICS_URI=${STAGE_ANALYTICS_URI}

            AUTOML_PROJECT=${STAGE_AUTOML_PROJECT}

            AUTOML_LOCATION=${STAGE_AUTOML_LOCATION}

            AUTOML_SM_MODEL=${STAGE_AUTOML_SM_MODEL}

            AUTOML_CAT_MODEL=${STAGE_AUTOML_CAT_MODEL}

            AUTOML_PRIVATE_KEY=${STAGE_AUTOML_PRIVATE_KEY}

            AUTOML_CLIENT_EMAIL=${STAGE_AUTOML_CLIENT_EMAIL}" > .env
      - run:
          name: 'Run geocode script'
          command: cd functions && node retrieveCoordinates
      - run: sudo npm install -g firebase-tools
      - run: firebase deploy -P $STAGE_FIREBASE_PROJECT_ID --only functions --token $FIREBASE_DEPLOY_TOKEN
  deploy_prod_dialogflow_agent:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd scripts && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - scripts/node_modules
      - run:
          name: 'Add env variables'
          command: cd scripts && echo
            "AGENT_PROJECT=${PROD_AGENT_PROJECT}

            AGENT_PRIVATE_KEY=${PROD_AGENT_PRIVATE_KEY}

            AGENT_CLIENT_EMAIL=${PROD_AGENT_CLIENT_EMAIL}" > .env
      - run:
          name: 'Agent Configuration'
          command: cd agent && mv agent.prod.json agent.json
      - run:
          name: 'Import to Prod DialogFlow'
          command: cd scripts && node importDialogFlow  
  deploy_prod_functions:
    docker:
      - image: circleci/node:10.15.0
    working_directory: ~/repo/
    steps:
      - checkout
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd functions && npm install
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - functions/node_modules
      - run:
          name: 'Add env variables'
          command: cd functions && echo
            "GOOGLE_MAPS_KEY=${PROD_GOOGLE_MAPS_KEY}

            SERVICE_DESK_KEY=${PROD_SERVICE_DESK_KEY}

            SERVICE_DESK_URI=${PROD_SERVICE_DESK_URI}

            SERVICE_DESK_ID=${PROD_SERVICE_DESK_ID}

            REQUEST_TYPE_ID=${PROD_REQUEST_TYPE_ID}

            SERVICE_DESK_ENV=${PROD_SERVICE_DESK_ENV}

            ANALYTICS_URI=${PROD_ANALYTICS_URI}

            AUTOML_PROJECT=${PROD_AUTOML_PROJECT}

            AUTOML_LOCATION=${PROD_AUTOML_LOCATION}

            AUTOML_SM_MODEL=${PROD_AUTOML_SM_MODEL}

            AUTOML_CAT_MODEL=${PROD_AUTOML_CAT_MODEL}

            AUTOML_PRIVATE_KEY=${PROD_AUTOML_PRIVATE_KEY}

            AUTOML_CLIENT_EMAIL=${PROD_AUTOML_CLIENT_EMAIL}" > .env
      - run:
          name: 'Run geocode script'
          command: cd functions && node retrieveCoordinates
      - run: sudo npm install -g firebase-tools
      - run: firebase deploy -P $PROD_FIREBASE_PROJECT_ID --only functions --token $FIREBASE_DEPLOY_TOKEN
workflows:
  version: 2
  build_deploy:
    jobs:
      - deploy_dev_dialogflow_agent
      - deploy_isd_dialogflow_agent
      - deploy_stage_dialogflow_agent
      - deploy_prod_dialogflow_agent
      - deploy_dev_functions:
          requires: 
            - deploy_dev_dialogflow_agent
          filters:
            branches:
              only:
                - development
      - deploy_isd_functions:
          requires: 
            - deploy_isd_dialogflow_agent
          filters:
            branches:
              only:
                - isd
      - deploy_stage_functions:
          requires: 
            - deploy_stage_dialogflow_agent
          filters:
            branches:
              only:
                - stage
      - deploy_prod_functions:
          requires: 
            - deploy_prod_dialogflow_agent
          filters:
            branches:
              only:
                - master
